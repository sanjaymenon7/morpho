<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <title>Recommender</title>
  <script src="../bower_components/react/react-dom.js"></script>
  <script src="../bower_components/react/react.js"></script>
  <script src="../bower_components/jquery/dist/jquery.js"></script>
  <script src="../bower_components/babel/browser.js"></script>
  <script src="javascripts/react-multiselect.js"></script>


  <link rel='stylesheet' href='../bower_components/bootstrap/dist/css/bootstrap.css' />
  <link rel='stylesheet' href='/stylesheets/style.css' />
  <link rel='stylesheet' href='/stylesheets/flexBox.css' />
  <link rel='stylesheet' href='/stylesheets/bootstrap-multiselect.css' type="text/css" />
  <link rel='stylesheet' href='/stylesheets/react-select.css' type="text/css" />
  <link rel='stylesheet' href='/stylesheets/basic.css' type="text/css" />
</head>
<body>

<h2>Recommender</h2>

<br/>
<div id="content">

</div>
<br/>
<div id="chkBox" ref="columnDropDown">
</div>
<div id="chkBox12">
</div>
<br/>
<div id="multiselect-basic">

</div>



<script type="text/babel">


  var MainComponent = React.createClass({
    getInitialState: function() {
      return {data: []};
    },
    getDefaultProps : function() {
      return {mainData: []};
    },
    componentDidMount: function() {
      $.ajax({
        url: 'http://localhost:3000/mainData',
        dataType: 'json',
        cache: false,
        success: function(data) {
          this.setState({data: data});
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
    },
    render: function() {
      return (
      <div>

      <div className="parentContainer">
      {
        this.props.mainData.map(function(phone) {
          return (
          <div class="tile">
          <div className ="child header tile-title   " >{phone.column_header.name}</div>
          {phone.column_data.map(function(colData){
            return(
            <div className ="child specs" >{colData.value}</div>
            );
          })}
          </div>
          );
        })
      }
      </div>
      </div>

      );
    }
  });

  React.render(<MainComponent />, document.getElementById('content'));


  var PerfFilterComponent = React.createClass({displayName: "Basic",
    getInitialState: function() {
      return {data: [],selections:[]};
    },
    componentDidMount: function() {
      $.ajax({
        url: 'http://localhost:3000/perfColoumnData',
        dataType: 'json',
        cache: false,
        success: function(data) {
          this.setState({data: data});
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
    },
    getDefaultProps: function() {
      return {items: [],perfDataProp: []}
    },
    handleItemSelected: function(item) {
      console.log('Item selected: '+item.id+' - '+item.text)
    },
    handleItemDeselected: function(item) {
      console.log('Item deselected: '+item.id+' - '+item.text)
    },
    onChangeFn: function(selections) {
      console.log('Items: '+JSON.stringify(selections))
      this.props.setPerfColData(JSON.stringify(selections));
    },
    render: function() {
      return (

              React.createElement(MultiSelect, {
                items:  this.props.perfDataProp,
                onItemSelected: this.handleItemSelected,
                onItemDeselected: this.handleItemDeselected,
                onChange: this.onChangeFn}
              ));
    }
  })

  // written for second filter .
  var SecondFilterComponent = React.createClass({displayName: "Basic",
    getInitialState: function() {
      return {data: [],selections:[]};
    },
    componentDidMount: function() {
      $.ajax({
        url: 'http://localhost:3000/allColumnData',
        dataType: 'json',
        cache: false,
        success: function(data) {
          this.setState({data: data});
          console.log("log of data in componentDIDmount");
          console.log(data);
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
      var input = this.refs.ColumnFilterId;
      var dom = this.getDOMNode();
      console.log("dom: ");
      //console.log($(dom).children().children("button").children(0).click());
      console.log(input);
      //$(dom).children().children("button").children(0).click();
    },
    componentWillUpdate: function(){
      // $('#ColumnFilterId').children().children("button").first().click();
    },
    getDefaultProps: function() {
      return {items: [],secondDataProp: []}
    },
    handleItemSelected: function(item) {
      console.log('Item selected: '+item.id+' - '+item.text)

    },

    selectAll: function(items){
      for(i=0;i<items.length;i++){
        items[i].selected=true;
      }
    },
    handleItemDeselected: function(item) {
      console.log('Item deselected: '+item.id+' - '+item.text)
      // testing selected stuff
      item.Selected=false;
    },
    onChangeFn: function(selections) {
      console.log('Items: '+JSON.stringify(selections))
      this.props.setAllColData(JSON.stringify(selections));
    },
    render: function() {
      return (

              React.createElement(MultiSelect, {
                items:  this.props.secondDataProp,
                onItemSelected: this.handleItemSelected,
                onItemDeselected: this.handleItemDeselected,
                onChange: this.onChangeFn}
              ));
    }
  })
  // React.render(React.createElement(FilterComponent), document.getElementById('multiselect-basic'));


  var Parent = React.createClass({

    getInitialState: function () {

      return {perfColData: [], colData:[],mainData:[], initPerfColData:[],initMainData:[]}

    },
    componentDidMount: function() {
      $.ajax({
        url: 'http://localhost:3000/perfColoumnData',
        dataType: 'json',
        cache: false,
        success: function(data) {
          console.log("in success of component did mount. initperfcoldata:");
          //console.log(initPerfColData.toSource());
          this.setState({initPerfColData: data});
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });

      $.ajax({
        url: 'http://localhost:3000/allColumnData',
        dataType: 'json',
        cache: false,
        success: function(data) {
          console.log("in success of component did mount. AllColumnData:");
          //console.log(initPerfColData.toSource());
          this.setState({initSecondColData: data});
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });

      $.ajax({
        url: 'http://localhost:3000/get-columns',
        dataType: 'json',
        data:{table:'MainTable'},
        cache: false,
        success: function(data) {
          console.log("ajax call of maintable");
          console.log(data);
          this.setState({initMainData: data});
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });

    },
    componentWillUpdate : function(nextProps, nextState) {
      console.log("Will update")
      console.log(nextState)
      return true;
    },

    render: function () {

      var me = this;

      var setPerfColData = function (data) {
        console.log('Item selected in parent: '+data)
        this.setState({perfColData: data});
        console.log("State PErf"+this.state.perfColData);
        $.ajax({
          url : "http://localhost:3000/getPerfColoumnData",
          type: "POST",
          dataType: 'json',
          data : data,
          success: function(data, textStatus, jqXHR)
          {
            console.log(data)
            me.setState({initMainData:data})
          },
          error: function (jqXHR, textStatus, errorThrown)
          {

          }
        });

      }.bind(this);

      var setAllColData = function (data) {
        console.log('Item selected in parent: '+data)
        this.setState({perfColData: data});
        console.log("State PErf in get all column data"+this.state.perfColData);
        $.ajax({
          url : "http://localhost:3000/getAllColoumnData",
          type: "POST",
          dataType: 'json',
          data : data,
          success: function(data, textStatus, jqXHR)
          {
            console.log(data)
            me.setState({initMainData:data})
          },
          error: function (jqXHR, textStatus, errorThrown)
          {

          }
        });

      }.bind(this);

      var setColData = function (data) {

        me.setState({colData: data});

      };
      var setMainData = function (data) {

        me.setState({mainData: data});

      };

      var setSecondColData = function (data) {
        me.setState({secondData: data})
      };

      return(
      <div id="ParentID">
      <div className="row">
        <div className ="col-md-6">
          <h4>Select Performace Columns</h4>
        </div>
        <div className ="col-md-6">
          <h4>Filter Columns</h4>
        </div>
      </div>
      <div className="row">
      <div id="PerfFilterId" className="col-md-6" >
        <PerfFilterComponent perfDataProp={this.state.initPerfColData} setPerfColData={setPerfColData} />
      </div>
      <div ref="ColumnFilterId" id="ColumnFilterId" className="col-md-6" >
        <SecondFilterComponent secondDataProp={this.state.initSecondColData} setAllColData={setAllColData} />
      </div>
      </div>
      <MainComponent mainData={this.state.initMainData}/>
      </div>)
      ;

    }

  });
  React.render(<Parent />, document.getElementById('multiselect-basic'));

</script>

</body>
</html>
