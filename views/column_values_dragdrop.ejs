<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8"/>
    <title>Recommender</title>
    <script src="../bower_components/jquery/dist/jquery.js"></script>
    <script src="../bower_components/babel/browser.js"></script>
    <script src="../bower_components/bootstrap/dist/js/bootstrap.js"></script>
    <script src="../bower_components/bootstrap-material-design/dist/js/material.js"></script>
    <script src="../bower_components/bootstrap-material-design/dist/js/ripples.js"></script>
    <script src="../bower_components/jquery-validation/dist/jquery.validate.js"></script>
    <script src="../bower_components/Sortable/Sortable.js"></script>
    <script src="../bower_components/pleasejs/dist/Please.js"></script>

    <link rel="" media="screen" href="../bower_components/flat-ui/fonts/glyphicons/flat-ui-icons-regular.ttf">
    <link rel="stylesheet" href="../bower_components/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../bower_components/bootstrap-material-design/dist/css/ripples.css">
    <link rel="stylesheet" href="../bower_components/bootstrap-material-design/dist/css/material.css">
    <link rel="stylesheet" href="../bower_components/bootstrap-material-design/dist/css/material-fullpalette.css">

    <link rel="stylesheet" href="../bower_components/bootstrap-material-design/dist/css/roboto.css">
    <link rel="" media="screen" href="../bower_components/bootstrap-material-design/fonts/Material-Design-Icons.svg">
    <link rel='stylesheet' href='/stylesheets/style.css'/>
    <link rel='stylesheet' href='/stylesheets/flexBox.css'/>
    <style>
        ul {
            list-style-type: none;
        }
    </style>


</head>

<script type="text/javascript">
    var mainData;// use this to alter the json in the client side.
    var mapMaindata = new Map();
    var divColors=new Array(); // used to create the divColors for Ordinal data.
    //var mapValuesToAcv=new Map();

    $(document).ready(function () {
        $.material.init();

        $.ajax({
            url: '/column_values_dragdrop/column_values_dragdrop_post',
            type: 'GET',
            success: function (data, textStatus, jqXHR) {
                console.log("success post column_values_dragdrop");
                var htmlData = '';
                if (data) {

                    mainData = data;
                    for (var i = 0; i < mainData.values.length; i++) {
                        mapMaindata.set(mainData.values[i].value, mainData.values[i].acv);
                        console.log('i=' + i + ' and item: ' + mapMaindata.get(mainData.values[i].value));
                        //console.log('something here');

                    }

                    var tempValues=mapMaindata.keys();
                    mapMaindata.forEach(function(value, key) {
                        console.log(key + " = " + value);
                    }, mapMaindata);

                    if (data.dataType == 'numeric') {
                        numericDivCreator(mainData);
                    }
                    else {
                        ordinalDivCreator(mainData);
                    }

                }
            },

            error: function (jqXHR, textStatus, errorThrown) {

            }
        });

    });


</script>


<body>
<div id="headerdiv" style="display: none;">columnDragDrop</div>
<% include header.ejs %>
<form class="bs-component"  >
<div class="row">
    <div class="col-md-12">
        <div class="well bs-component" style="min-height:350px">
            <br><br>
            <div id="warning" class="alert alert-dismissible alert-warning" style="display: none">
                <button id="warningBtn" type="button" class="close" >Ã—</button>
                <h4>Warning!</h4>
                <b>Please group all Elements to the right before proceeding</b>
            </div>
            <div class="row panel-info" id="numericDiv" style="display:none;" >

                <div class="col-md-3"></div>
                <div class="col-md-6 panel-info"  >
                    <div class="panel-heading">
                        Priority for Nominal Data
                    </div>

                    <div class="row " id="numericRadioDiv">
                        <div class="col-md-12" >
                            <div style=" border-style: solid; border-width: 1px; border-color: lightblue">
                                <div class="radio radio-primary">
                                    <label>
                                        <input type="radio" name="optionsRadios" id="optionsRadios1" value="option1"
                                               checked="" onclick="numericJsonReturn('asc');">

                                        <div id="asc"></div>
                                    </label>
                                </div>
                                <div class="radio radio-primary">
                                    <label>
                                        <input type="radio" name="optionsRadios" id="optionsRadios2" value="option2"
                                               onclick="numericJsonReturn('dsc')">

                                        <div id="dsc"></div>
                                    </label>
                                </div>
                            </div>

                        </div>
                    </div>

                </div>

            </div>

            <div class="row" id="ordinalDiv" style="display:none">
                <div class="col-md-11 panel-body">

                    <div class="row" id="headSortableDiv" >
                        <div class="col-md-2">
                        </div>
                        <div class="col-md-4 ">
                            <div id="initDiv" class="panel panel-info" style="max-height:300px;overflow-y: auto">
                                <div class="panel-heading "> Available elements</div>
                                <div>
                                <ul id="initOrdinalList" style="min-height:80px" ondrop="javascript:listParentUpdater('initOrdinalList')">

                                </ul>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-1">
                            </div>
                        <div id="positionedDiv" class="col-md-3 container" style="max-height:400px;overflow-y: auto">
                            <div id="position1" class="panel panel-info">
                                <div class="panel-heading"> Group Elements Here</div>
                                <div class="form-group ">
                                <input class="form-control" placeholder="Group Label" id="focusedInput1" type="text">
                                </div>
                                <ul id="positionedList1" style="min-height:80px" ondrop="javascript:listParentUpdater('positionedList1')"></ul>

                            </div>
                        </div>
                        <div class="col-md-1">
                            <a href="javascript:newDivCreator(this)" class="btn btn-raised btn-success">Add new row</a>

                        </div>
                    </div>

                </div>

            </div>
            <br><br><br><br>
            <div class="row button" id="buttonsDiv" >
                <div class="col-md-2">
                    <a href="/coloumnpreprocessor" class="btn btn-raised btn-info">Back</a>
                </div>
                <div class="col-md-8">
                    </div>
                <div class="col-md-2">
                    <a href="javascript:nextStep()" class="btn btn-raised btn-info">Next Step</a>
                </div>

            </div>
        </div>
    </div>
</div>
</form >
</body>
<script>
    //var initDiv=$('#initDiv');
    //var positionedDiv=$('#positionedDiv');
    // // <li id="emptyForRemove" class="alert-info"> Add your elements here</li>
    var currentDiv = "position1";

    function sortableCaller() {
        var initOrdinalList = document.getElementById("initOrdinalList");
        var positionedList1 = document.getElementById("positionedList1");

        var initDiv = document.getElementById("initDiv");
        var positionedDiv = document.getElementById("positionedDiv");// used for adding new element using newPosition

        createSortableElement(initOrdinalList, 'sortableList');
        createSortableElement(positionedList1, 'sortableList');
        createSortableElement(initDiv, 'headSortableDiv', 'TitleElement');
        createSortableElement(document.getElementById('position1'), 'headSortableDiv', 'TitleElement');


    }// end function sortableCaller().

    function createSortableElement(divId, groupId, handleElement) {


        Sortable.create(divId, {
            group: '' + groupId,
            animation: 150,
            handle: handleElement,
            filter: '.panel-heading',
            onAdd: function (evt) {
                console.log('add for div: ' + divId.id);
                // logic for handling empty element and removing was here.
                console.log('createsortableElement onAdd:' + divId + ' for group:' + groupId, evt.item);
                console.log(this);
                //console.log(this.el.parentElement.id);
            },
            onUpdate: function (evt) {
                console.log('createsortableElement onUpdate:' + divId + ' for group:' + groupId, evt.item);
            },
            onRemove: function (evt) {
                console.log('createsortableElement onRemove:' + divId + ' for group:' + groupId, evt.item);
            },
            onStart: function (evt) {
                console.log('createsortableElement onStart:' + divId + ' for group:' + groupId, evt.item);
            },
            onEnd: function (evt) {
                console.log('createsortableElement onEnd:' + divId + ' for group:' + groupId, evt.item);
                //console.log(this);
                //console.log('parent: '+this.el.parentElement.id);

            }
        });
    }// end fucntion sortableCaller().

    function listParentUpdater(elementId){
        console.log('listParentUpdater: ' +elementId);
        var divCount=elementId.substring(elementId.length-1);
        var listElement=document.getElementById(elementId);
        for(var i=0;i<listElement.children.length;i++){
            console.log('element now is : ');
            console.log(listElement.getElementsByTagName('li')[i]);
            if(listElement.getElementsByTagName('li')[i])
            {
                var innerValue=listElement.getElementsByTagName('li')[i].innerHTML;
                console.log('innerValue '+innerValue);
                console.log('current value in mapmaindata: '+mapMaindata.get(innerValue));
                console.log('divcount: '+divCount);
                mapMaindata.set(innerValue,divCount);
            }


        }

    }// end function listParentUpdater.
//TODO
    // scrollbar and divisions for the page..
    $( "#warningBtn" ).click(function() {

        $("#warning").css("display","none");
    });

    function nextStep(){
        if(mainData.dataType != 'numeric') {
            var initElement=document.getElementById('initOrdinalList')
            if(initElement.getElementsByTagName('li').length>0){
                $('#warning').css("display","block");
                alert('please order all Elements to the right before proceeding');
                return;
            }
            var countOfDiv=currentDiv.substr(currentDiv.length-1);

            for(var i=1;i<=countOfDiv;i++){
                listParentUpdater('positionedList'+i);

            }

        }
        for(i=0;i<mainData.values.length;i++){
            console.log('maindata value at '+i);
            console.log(mapMaindata.get(mainData.values[i].value)+'   ... '+mainData.values[i].acv);
            mainData.values[i].acv=mapMaindata.get(mainData.values[i].value);

        }
        console.log("main data: ");
        console.log(mainData);
        $.ajax({
            url: '/column_values_dragdrop/column_values_dragdrop_result',
            type: 'POST',
            data: JSON.stringify(mainData),
            contentType: "application/json; charset=utf-8",
            //contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                console.log("success post column_values_result");
                window.location='/recommender';
            },

            error: function (jqXHR, textStatus, errorThrown) {
                console.log('something went wrong here..');
            }
        });

    }// end of nextStep.
    function colorGenerator(){

        divColors=Please.make_color({
            golden: true,
            base_color: 'lightcyan',
            grayscale: true,
            colors_returned: mainData.values.length *2

        });
       // console.log(divColors);

    }// end function colorGenerator().

    function newDivCreator(evt) {
        var counter = currentDiv.substr(8,  currentDiv.length - 1);
        console.log("counter is: " + counter);
        counter++;
        var clr = Please.make_color();
        var newDiv = '<div id="position' + counter + '" class="panel panel-info"';
        newDiv+= ' style="background-color:' + divColors[counter%mainData.values.length] + '">';
        newDiv += '<div class="panel-heading" > ';
        newDiv += '<div class="row" ><div class="col-md-10 ">Group Elements Here</div><div class="col-md-2" >';
        newDiv+= '<a href="javascript:divRemover(position' + counter + ' )" ';
        newDiv+= '<span class="glyphicon glyphicon-remove" aria-hidden="true"></span> </a></div> ' ;

        newDiv+= ' </div> </div> ';
        newDiv+= '<div class="form-group "> ';
        newDiv+= '<input class="form-control" placeholder="Group Label" id="focusedInput'+counter+'" type="text">';
        newDiv+='</div>';
        newDiv += '<ul id="positionedList' + counter + '" style="min-height:80px" ondrop="javascript:listParentUpdater(\'positionedList'+counter+'\')">';
        //newDiv += '<div class="" ><a href="javascript:divRemover(position' + counter + ' )"  class="btn- btn-raised btn-sm">Delete Selection';
        newDiv += '<div class="ripple-container"></div></a></div></div>';
        var tempDiv = document.getElementById('positionedDiv');
        //tempDiv.append(newDiv);
        $('#positionedDiv').append(newDiv);

        console.log('new Div:' + newDiv);
        console.log('child new div appended here');
        createSortableElement(document.getElementById('position' + counter), 'sortableDiv','title-heading');
        createSortableElement(document.getElementById('positionedList' + counter), 'sortableList','','position'+counter);

        currentDiv = 'position' + counter;

    }// end function newDivCreator.

    function divRemover(divElement) {
        console.log('called by element ' + divElement.id);
        var toDelete = document.getElementById(divElement.id);
        var initDiv = document.getElementById("initDiv");
        var toMove = toDelete.children;
        var listElements;
        console.log('tomove elements ');
        console.log(toMove);

        for (i = 0; i < toMove.length; i++) {
            if (toMove[i].tagName == 'UL')
                listElements = toMove[i].children;
        }
//        console.log('listElements ');
//        console.log(listElements);
        toMove[0].style.backgroundColor = '';

        $("#initOrdinalList").append(listElements);
        $("#" + divElement.id).remove();

    }

    function ordinalDivCreator(data) {
        colorGenerator();
        document.getElementById('ordinalDiv').style.display = 'block';
        document.getElementById('numericDiv').innerHTML = "";
        var txt = '';//'<div class="table-bordered " ><thead><div class=" row"><div class="col-md-2 text-center">Name</div><div class="col-md-6 text-center">Value</div></div></thead><br><br>';

        var columnValues = data.values;
        //console.log(columnValues);
        for (var i = 0; i < columnValues.length; i++) {
            console.log(columnValues[i]);
            // commented because trying drag and drop here
            txt += '<li class="dropdown-menu-inverse">' + columnValues[i].value + '</li>';

        }
        console.log(txt);
        $('#initOrdinalList').append(txt);
        sortableCaller();
    }// end function OrdinalDivCreator.

    function numericDivCreator(data) {
        document.getElementById('numericDiv').style.display = 'block';
        document.getElementById('ordinalDiv').innerHTML = "";

        //console.log('numeric element here');
        var txt = '';//'<div class="table-bordered " ><thead><div class=" row"><div class="col-md-2 text-center">Name</div><div class="col-md-6 text-center">Value</div></div></thead><br><br>';
        var columnValues = data.values;
        //console.log(columnValues);
//        for (var i = 0; i < columnValues.length; i++) {
//            console.log(columnValues[i]);
//            // commented because trying drag and drop here
//            txt += '<li class="">' + columnValues[i].value + '</li>';
//
//        }

        $('#initNumericList').append(txt);
        $('#asc').append('Ascending Value<b> ' + columnValues[0].value + '</b> is better than <b> ' + columnValues[1].value+'</b>');
        $('#dsc').append('Descending Value<b> ' + columnValues[1].value + '</b> is better than <b> ' + columnValues[0].value+'</b>');
        //$('#numericRadioDiv').append(txt2);

    }// end functiion numericDivCreator.

    function numericJsonReturn(ascOrDsc) {

        if (ascOrDsc == 'asc') {
            mainData.values[0].acv = mainData.values[0].value;
            mainData.values[1].acv = mainData.values[1].value;
        }
        else {
            mainData.values[0].acv = mainData.values[1].value;
            mainData.values[1].acv = mainData.values[0].value;
        }
    }// end function numericJsonReturn.
</script>
</html>